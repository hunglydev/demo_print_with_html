const bearerToken =
    "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGktdjIubWFzdGVycHJvLnZuXC9cL2FwaVwvYXV0aFwvbG9naW4iLCJpYXQiOjE3MzEwNTAzMTEsImV4cCI6MTczMTA2ODMxMSwibmJmIjoxNzMxMDUwMzExLCJqdGkiOiJIYW9TZ0hmMWh6MGJ4ODhkIiwic3ViIjoxODM5LCJwcnYiOiI5NGRiZDk2MWFhZWYwZTNjZTY2YWQ3ZDUwZTY0NzcxNzYwOWRkYTI0IiwiYmFzZV90b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUp6ZFdJaU9pSjBZWEJvYjJGeVpYWnBaWGNpTENKaGVuQWlPaUpoWkcxcGJpSXNJbXAwYVNJNklqZzFZamd6TURFNUxUUXlPVGd0TkRWbFppMDRaRFU0TFdNek1UZGxZV1E1WkRrMVl5SXNJbTVoYldWcFpDSTZJakl5TWlJc0ltVjRjQ0k2TVRjek5qSXpORE16TUN3aWMybGtJam9pSWl3aWJtSm1Jam94TnpNeE1EVXdNek13TENKcGMzTWlPaUpvYjNOamJ5NTJiaUlzSW1GMVpDSTZJbWh2YzJOdkxuWnVJbjAudGQ4eUp2eUx4eGFJdVlIU3NIQ3VYNU9ZdFlGVDRoOXRlX2NOMnlwaTB0VSIsInRlbmFudF9jb2RlIjoidGFwaG9hcmV2aWV3IiwibGV2ZWwiOjAsIkVtcGxveWVlSWQiOiJiODUzOGEyZi03OTcwLTQyYWQtYmM1NS1jNGI4NzNmYWNjMTgifQ.go0ZWJwZ_9snlSF8uRizLrDwad4HIl957Vo11WfOHYw";

String htmlBase64 =
    "";
